#!/usr/bin/env python3

"""
go_go_gadget.py

Author: Copilot (GitHub Copilot, OpenAI, and contributors)
Attribution: Generated by GitHub Copilot and OpenAI's GPT models, with thanks to the authors of all referenced open-source software.

This script automates proposing Copilot-powered fixes for GitHub issues, using go_go_git and go_go_copilot modules.
"""

import os
import sys
import shutil
import re
import json
import logging
from go_go_git import GoGoGit, GoGoGitError
from go_go_copilot import GoGoCopilot, GoGoCopilotError

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
COPILOT_PROPOSALS = ".copilot/proposals"

def fatal(msg):
    logging.error(msg)
    sys.exit(1)

def menu_select(options, prompt):
    print(prompt)
    for i, option in enumerate(options, 1):
        print(f"{i}. {option}")
    idx = input("Select option: ")
    try:
        idx = int(idx)
        if 1 <= idx <= len(options):
            return options[idx - 1]
    except Exception:
        pass
    fatal("Invalid selection")

def gh_list_orgs():
    try:
        out = os.popen("gh api user/orgs --jq '.[].login'").read().splitlines()
        user = os.popen("gh api user --jq .login").read().strip()
        return [user] + out
    except Exception:
        fatal("Failed to list GitHub organizations.")

def gh_list_repos(org):
    try:
        out = os.popen(f"gh repo list {org} --json name -L 100 | jq -r '.[].name'").read().splitlines()
        return out
    except Exception:
        fatal(f"Failed to list repos for {org}")

def gh_list_issues(org, repo):
    try:
        out = os.popen(f"gh issue list -R {org}/{repo} --json number,title -L 100 | jq -c '.[]'").read().splitlines()
        issues = []
        for line in out:
            d = json.loads(line)
            issues.append(f"{d['number']}: {d['title']}")
        return issues
    except Exception:
        fatal(f"Failed to list issues for {org}/{repo}")

def gh_check_issue_exists(org, repo, issue_num):
    code = os.system(f"gh issue view -R {org}/{repo} {issue_num} > /dev/null 2>&1")
    return code == 0

def empty_dir(dir_path):
    if os.path.exists(dir_path):
        for f in os.listdir(dir_path):
            fp = os.path.join(dir_path, f)
            if os.path.isdir(fp):
                shutil.rmtree(fp)
            else:
                os.remove(fp)

def main():
    # Argument parsing
    arg = None
    if len(sys.argv) == 2:
        arg = sys.argv[1]
        m = re.match(r"^([A-Za-z0-9_.-]+)/([A-Za-z0-9_.-]+)/issue/([0-9]+)$", arg)
        if not m:
            fatal("Argument must match the pattern ORG/REPO_NAME/issue/ISSUE_NUM")
        org, repo_name, issue_num = m.group(1), m.group(2), int(m.group(3))
        if not gh_check_issue_exists(org, repo_name, issue_num):
            fatal(f"Issue {issue_num} does not exist at {org}/{repo_name}.")
    elif len(sys.argv) == 1:
        # Interactive selection
        org = menu_select(gh_list_orgs(), "Select organization/user:")
        if not os.path.exists(org):
            os.makedirs(org)
        repo_name = menu_select(gh_list_repos(org), f"Select repository for {org}:")
        issue_options = gh_list_issues(org, repo_name)
        if not issue_options:
            fatal("No open issues found.")
        issue_sel = menu_select(issue_options, f"Select issue for {org}/{repo_name}:")
        issue_num = int(issue_sel.split(":")[0])
    else:
        fatal("Usage: go_go_gadget.py [ORG/REPO_NAME/issue/ISSUE_NUM]")

    # Ensure org and repo folder exists and repo is cloned/clean
    base_dir = os.getcwd()
    repo_path = GoGoGit.ensure_cloned(org, repo_name, base_dir)
    git = GoGoGit(repo_path)
    if not git.is_clean():
        fatal(f"Repository {repo_path} is not clean. Please commit or stash changes.")

    # Prepare branch
    branch_name = f"copilot-proposed-fixes-for-issue-{issue_num}"
    if git.branch_exists(branch_name):
        git._run_git(["checkout", branch_name])
        if not git.is_clean():
            fatal(f"Branch {branch_name} is not clean. Please commit or stash changes.")
    else:
        git.switch_or_create_branch(branch_name, push=True)

    # Prepare proposals dir
    proposal_dir = os.path.join(COPILOT_PROPOSALS, org, repo_name, str(issue_num))
    if os.path.exists(proposal_dir):
        empty_dir(proposal_dir)
    else:
        os.makedirs(proposal_dir, exist_ok=True)

    # Query Copilot
    try:
        copilot = GoGoCopilot()
        result = copilot.suggest_solution(org, repo_name, issue_num)
    except GoGoCopilotError as e:
        fatal(str(e))

    # Write files to proposal dir
    for fname, content in result["files"].items():
        target = os.path.join(proposal_dir, fname)
        tdir = os.path.dirname(target)
        if not os.path.exists(tdir):
            os.makedirs(tdir, exist_ok=True)
        with open(target, "w") as f:
            f.write(content)
        # Copy into repo root for staging
        repo_target = os.path.join(repo_path, fname)
        shutil.copyfile(target, repo_target)

    print(f"Files written to {proposal_dir}. Please review them before continuing.")
    input("Press Enter to continue...")

    # Stage and commit
    files_to_add = [fname for fname in result["files"].keys()]
    git.add_commit_push(
        files=files_to_add,
        message=(
            f"Github Copilot proposed changes for issue #{issue_num}\n"
            f"https://github.com/{org}/{repo_name}/issues/{issue_num}\n"
            f"\nExplanation (from Copilot):\n{result['explanation']}\n"
            f"\nGenerated by go_go_gadget.py (Copilot, OpenAI, GitHub Copilot, thanks to all OSS authors whose software and docs contributed to this work.)"
        ),
        push=True,
    )

    print("Proposed changes committed and pushed to remote.")
    print("Returning to issue selection menu.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        fatal(str(e))